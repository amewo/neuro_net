// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: states.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "states.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* neuron_link_state_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  neuron_link_state_reflection_ = NULL;
const ::google::protobuf::Descriptor* neuron_state_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  neuron_state_reflection_ = NULL;
const ::google::protobuf::Descriptor* pattern_state_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pattern_state_reflection_ = NULL;
const ::google::protobuf::Descriptor* patterns_state_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  patterns_state_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_states_2eproto() {
  protobuf_AddDesc_states_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "states.proto");
  GOOGLE_CHECK(file != NULL);
  neuron_link_state_descriptor_ = file->message_type(0);
  static const int neuron_link_state_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(neuron_link_state, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(neuron_link_state, w_),
  };
  neuron_link_state_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      neuron_link_state_descriptor_,
      neuron_link_state::default_instance_,
      neuron_link_state_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(neuron_link_state, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(neuron_link_state, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(neuron_link_state));
  neuron_state_descriptor_ = file->message_type(1);
  static const int neuron_state_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(neuron_state, bias_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(neuron_state, sum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(neuron_state, signal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(neuron_state, links_),
  };
  neuron_state_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      neuron_state_descriptor_,
      neuron_state::default_instance_,
      neuron_state_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(neuron_state, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(neuron_state, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(neuron_state));
  pattern_state_descriptor_ = file->message_type(2);
  static const int pattern_state_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pattern_state, in_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pattern_state, out_),
  };
  pattern_state_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pattern_state_descriptor_,
      pattern_state::default_instance_,
      pattern_state_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pattern_state, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pattern_state, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pattern_state));
  patterns_state_descriptor_ = file->message_type(3);
  static const int patterns_state_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(patterns_state, patterns_),
  };
  patterns_state_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      patterns_state_descriptor_,
      patterns_state::default_instance_,
      patterns_state_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(patterns_state, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(patterns_state, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(patterns_state));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_states_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    neuron_link_state_descriptor_, &neuron_link_state::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    neuron_state_descriptor_, &neuron_state::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pattern_state_descriptor_, &pattern_state::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    patterns_state_descriptor_, &patterns_state::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_states_2eproto() {
  delete neuron_link_state::default_instance_;
  delete neuron_link_state_reflection_;
  delete neuron_state::default_instance_;
  delete neuron_state_reflection_;
  delete pattern_state::default_instance_;
  delete pattern_state_reflection_;
  delete patterns_state::default_instance_;
  delete patterns_state_reflection_;
}

void protobuf_AddDesc_states_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014states.proto\"*\n\021neuron_link_state\022\n\n\002i"
    "d\030\001 \002(\r\022\t\n\001w\030\002 \002(\002\"\\\n\014neuron_state\022\014\n\004bi"
    "as\030\001 \002(\002\022\013\n\003sum\030\002 \002(\002\022\016\n\006signal\030\003 \002(\002\022!\n"
    "\005links\030\004 \003(\0132\022.neuron_link_state\"(\n\rpatt"
    "ern_state\022\n\n\002in\030\001 \003(\002\022\013\n\003out\030\002 \003(\002\"2\n\016pa"
    "tterns_state\022 \n\010patterns\030\001 \003(\0132\016.pattern"
    "_state", 246);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "states.proto", &protobuf_RegisterTypes);
  neuron_link_state::default_instance_ = new neuron_link_state();
  neuron_state::default_instance_ = new neuron_state();
  pattern_state::default_instance_ = new pattern_state();
  patterns_state::default_instance_ = new patterns_state();
  neuron_link_state::default_instance_->InitAsDefaultInstance();
  neuron_state::default_instance_->InitAsDefaultInstance();
  pattern_state::default_instance_->InitAsDefaultInstance();
  patterns_state::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_states_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_states_2eproto {
  StaticDescriptorInitializer_states_2eproto() {
    protobuf_AddDesc_states_2eproto();
  }
} static_descriptor_initializer_states_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int neuron_link_state::kIdFieldNumber;
const int neuron_link_state::kWFieldNumber;
#endif  // !_MSC_VER

neuron_link_state::neuron_link_state()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void neuron_link_state::InitAsDefaultInstance() {
}

neuron_link_state::neuron_link_state(const neuron_link_state& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void neuron_link_state::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  w_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

neuron_link_state::~neuron_link_state() {
  SharedDtor();
}

void neuron_link_state::SharedDtor() {
  if (this != default_instance_) {
  }
}

void neuron_link_state::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* neuron_link_state::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return neuron_link_state_descriptor_;
}

const neuron_link_state& neuron_link_state::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_states_2eproto();
  return *default_instance_;
}

neuron_link_state* neuron_link_state::default_instance_ = NULL;

neuron_link_state* neuron_link_state::New() const {
  return new neuron_link_state;
}

void neuron_link_state::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    w_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool neuron_link_state::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_w;
        break;
      }

      // required float w = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_w:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &w_)));
          set_has_w();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void neuron_link_state::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required float w = 2;
  if (has_w()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->w(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* neuron_link_state::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required float w = 2;
  if (has_w()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->w(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int neuron_link_state::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required float w = 2;
    if (has_w()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void neuron_link_state::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const neuron_link_state* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const neuron_link_state*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void neuron_link_state::MergeFrom(const neuron_link_state& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_w()) {
      set_w(from.w());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void neuron_link_state::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void neuron_link_state::CopyFrom(const neuron_link_state& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool neuron_link_state::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void neuron_link_state::Swap(neuron_link_state* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(w_, other->w_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata neuron_link_state::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = neuron_link_state_descriptor_;
  metadata.reflection = neuron_link_state_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int neuron_state::kBiasFieldNumber;
const int neuron_state::kSumFieldNumber;
const int neuron_state::kSignalFieldNumber;
const int neuron_state::kLinksFieldNumber;
#endif  // !_MSC_VER

neuron_state::neuron_state()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void neuron_state::InitAsDefaultInstance() {
}

neuron_state::neuron_state(const neuron_state& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void neuron_state::SharedCtor() {
  _cached_size_ = 0;
  bias_ = 0;
  sum_ = 0;
  signal_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

neuron_state::~neuron_state() {
  SharedDtor();
}

void neuron_state::SharedDtor() {
  if (this != default_instance_) {
  }
}

void neuron_state::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* neuron_state::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return neuron_state_descriptor_;
}

const neuron_state& neuron_state::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_states_2eproto();
  return *default_instance_;
}

neuron_state* neuron_state::default_instance_ = NULL;

neuron_state* neuron_state::New() const {
  return new neuron_state;
}

void neuron_state::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    bias_ = 0;
    sum_ = 0;
    signal_ = 0;
  }
  links_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool neuron_state::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float bias = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &bias_)));
          set_has_bias();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_sum;
        break;
      }

      // required float sum = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_sum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &sum_)));
          set_has_sum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_signal;
        break;
      }

      // required float signal = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_signal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &signal_)));
          set_has_signal();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_links;
        break;
      }

      // repeated .neuron_link_state links = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_links:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_links()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_links;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void neuron_state::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required float bias = 1;
  if (has_bias()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->bias(), output);
  }

  // required float sum = 2;
  if (has_sum()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->sum(), output);
  }

  // required float signal = 3;
  if (has_signal()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->signal(), output);
  }

  // repeated .neuron_link_state links = 4;
  for (int i = 0; i < this->links_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->links(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* neuron_state::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required float bias = 1;
  if (has_bias()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->bias(), target);
  }

  // required float sum = 2;
  if (has_sum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->sum(), target);
  }

  // required float signal = 3;
  if (has_signal()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->signal(), target);
  }

  // repeated .neuron_link_state links = 4;
  for (int i = 0; i < this->links_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->links(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int neuron_state::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required float bias = 1;
    if (has_bias()) {
      total_size += 1 + 4;
    }

    // required float sum = 2;
    if (has_sum()) {
      total_size += 1 + 4;
    }

    // required float signal = 3;
    if (has_signal()) {
      total_size += 1 + 4;
    }

  }
  // repeated .neuron_link_state links = 4;
  total_size += 1 * this->links_size();
  for (int i = 0; i < this->links_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->links(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void neuron_state::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const neuron_state* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const neuron_state*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void neuron_state::MergeFrom(const neuron_state& from) {
  GOOGLE_CHECK_NE(&from, this);
  links_.MergeFrom(from.links_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bias()) {
      set_bias(from.bias());
    }
    if (from.has_sum()) {
      set_sum(from.sum());
    }
    if (from.has_signal()) {
      set_signal(from.signal());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void neuron_state::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void neuron_state::CopyFrom(const neuron_state& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool neuron_state::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  for (int i = 0; i < links_size(); i++) {
    if (!this->links(i).IsInitialized()) return false;
  }
  return true;
}

void neuron_state::Swap(neuron_state* other) {
  if (other != this) {
    std::swap(bias_, other->bias_);
    std::swap(sum_, other->sum_);
    std::swap(signal_, other->signal_);
    links_.Swap(&other->links_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata neuron_state::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = neuron_state_descriptor_;
  metadata.reflection = neuron_state_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pattern_state::kInFieldNumber;
const int pattern_state::kOutFieldNumber;
#endif  // !_MSC_VER

pattern_state::pattern_state()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pattern_state::InitAsDefaultInstance() {
}

pattern_state::pattern_state(const pattern_state& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pattern_state::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pattern_state::~pattern_state() {
  SharedDtor();
}

void pattern_state::SharedDtor() {
  if (this != default_instance_) {
  }
}

void pattern_state::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pattern_state::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pattern_state_descriptor_;
}

const pattern_state& pattern_state::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_states_2eproto();
  return *default_instance_;
}

pattern_state* pattern_state::default_instance_ = NULL;

pattern_state* pattern_state::New() const {
  return new pattern_state;
}

void pattern_state::Clear() {
  in_.Clear();
  out_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pattern_state::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated float in = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_in:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 13, input, this->mutable_in())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_in())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(13)) goto parse_in;
        if (input->ExpectTag(21)) goto parse_out;
        break;
      }

      // repeated float out = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_out:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 21, input, this->mutable_out())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_out())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_out;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pattern_state::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated float in = 1;
  for (int i = 0; i < this->in_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      1, this->in(i), output);
  }

  // repeated float out = 2;
  for (int i = 0; i < this->out_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      2, this->out(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pattern_state::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated float in = 1;
  for (int i = 0; i < this->in_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(1, this->in(i), target);
  }

  // repeated float out = 2;
  for (int i = 0; i < this->out_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(2, this->out(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pattern_state::ByteSize() const {
  int total_size = 0;

  // repeated float in = 1;
  {
    int data_size = 0;
    data_size = 4 * this->in_size();
    total_size += 1 * this->in_size() + data_size;
  }

  // repeated float out = 2;
  {
    int data_size = 0;
    data_size = 4 * this->out_size();
    total_size += 1 * this->out_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pattern_state::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pattern_state* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pattern_state*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pattern_state::MergeFrom(const pattern_state& from) {
  GOOGLE_CHECK_NE(&from, this);
  in_.MergeFrom(from.in_);
  out_.MergeFrom(from.out_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pattern_state::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pattern_state::CopyFrom(const pattern_state& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pattern_state::IsInitialized() const {

  return true;
}

void pattern_state::Swap(pattern_state* other) {
  if (other != this) {
    in_.Swap(&other->in_);
    out_.Swap(&other->out_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pattern_state::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pattern_state_descriptor_;
  metadata.reflection = pattern_state_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int patterns_state::kPatternsFieldNumber;
#endif  // !_MSC_VER

patterns_state::patterns_state()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void patterns_state::InitAsDefaultInstance() {
}

patterns_state::patterns_state(const patterns_state& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void patterns_state::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

patterns_state::~patterns_state() {
  SharedDtor();
}

void patterns_state::SharedDtor() {
  if (this != default_instance_) {
  }
}

void patterns_state::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* patterns_state::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return patterns_state_descriptor_;
}

const patterns_state& patterns_state::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_states_2eproto();
  return *default_instance_;
}

patterns_state* patterns_state::default_instance_ = NULL;

patterns_state* patterns_state::New() const {
  return new patterns_state;
}

void patterns_state::Clear() {
  patterns_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool patterns_state::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pattern_state patterns = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_patterns:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_patterns()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_patterns;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void patterns_state::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .pattern_state patterns = 1;
  for (int i = 0; i < this->patterns_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->patterns(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* patterns_state::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .pattern_state patterns = 1;
  for (int i = 0; i < this->patterns_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->patterns(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int patterns_state::ByteSize() const {
  int total_size = 0;

  // repeated .pattern_state patterns = 1;
  total_size += 1 * this->patterns_size();
  for (int i = 0; i < this->patterns_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->patterns(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void patterns_state::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const patterns_state* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const patterns_state*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void patterns_state::MergeFrom(const patterns_state& from) {
  GOOGLE_CHECK_NE(&from, this);
  patterns_.MergeFrom(from.patterns_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void patterns_state::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void patterns_state::CopyFrom(const patterns_state& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool patterns_state::IsInitialized() const {

  return true;
}

void patterns_state::Swap(patterns_state* other) {
  if (other != this) {
    patterns_.Swap(&other->patterns_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata patterns_state::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = patterns_state_descriptor_;
  metadata.reflection = patterns_state_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
