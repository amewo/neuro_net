// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: states.proto

#ifndef PROTOBUF_states_2eproto__INCLUDED
#define PROTOBUF_states_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_states_2eproto();
void protobuf_AssignDesc_states_2eproto();
void protobuf_ShutdownFile_states_2eproto();

class neuron_link_state;
class neuron_state;
class pattern_state;
class patterns_state;

// ===================================================================

class neuron_link_state : public ::google::protobuf::Message {
 public:
  neuron_link_state();
  virtual ~neuron_link_state();

  neuron_link_state(const neuron_link_state& from);

  inline neuron_link_state& operator=(const neuron_link_state& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const neuron_link_state& default_instance();

  void Swap(neuron_link_state* other);

  // implements Message ----------------------------------------------

  neuron_link_state* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const neuron_link_state& from);
  void MergeFrom(const neuron_link_state& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // required float w = 2;
  inline bool has_w() const;
  inline void clear_w();
  static const int kWFieldNumber = 2;
  inline float w() const;
  inline void set_w(float value);

  // @@protoc_insertion_point(class_scope:neuron_link_state)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_w();
  inline void clear_has_w();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 id_;
  float w_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_states_2eproto();
  friend void protobuf_AssignDesc_states_2eproto();
  friend void protobuf_ShutdownFile_states_2eproto();

  void InitAsDefaultInstance();
  static neuron_link_state* default_instance_;
};
// -------------------------------------------------------------------

class neuron_state : public ::google::protobuf::Message {
 public:
  neuron_state();
  virtual ~neuron_state();

  neuron_state(const neuron_state& from);

  inline neuron_state& operator=(const neuron_state& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const neuron_state& default_instance();

  void Swap(neuron_state* other);

  // implements Message ----------------------------------------------

  neuron_state* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const neuron_state& from);
  void MergeFrom(const neuron_state& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required float bias = 1;
  inline bool has_bias() const;
  inline void clear_bias();
  static const int kBiasFieldNumber = 1;
  inline float bias() const;
  inline void set_bias(float value);

  // required float sum = 2;
  inline bool has_sum() const;
  inline void clear_sum();
  static const int kSumFieldNumber = 2;
  inline float sum() const;
  inline void set_sum(float value);

  // required float signal = 3;
  inline bool has_signal() const;
  inline void clear_signal();
  static const int kSignalFieldNumber = 3;
  inline float signal() const;
  inline void set_signal(float value);

  // repeated .neuron_link_state links = 4;
  inline int links_size() const;
  inline void clear_links();
  static const int kLinksFieldNumber = 4;
  inline const ::neuron_link_state& links(int index) const;
  inline ::neuron_link_state* mutable_links(int index);
  inline ::neuron_link_state* add_links();
  inline const ::google::protobuf::RepeatedPtrField< ::neuron_link_state >&
      links() const;
  inline ::google::protobuf::RepeatedPtrField< ::neuron_link_state >*
      mutable_links();

  // @@protoc_insertion_point(class_scope:neuron_state)
 private:
  inline void set_has_bias();
  inline void clear_has_bias();
  inline void set_has_sum();
  inline void clear_has_sum();
  inline void set_has_signal();
  inline void clear_has_signal();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  float bias_;
  float sum_;
  ::google::protobuf::RepeatedPtrField< ::neuron_link_state > links_;
  float signal_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_states_2eproto();
  friend void protobuf_AssignDesc_states_2eproto();
  friend void protobuf_ShutdownFile_states_2eproto();

  void InitAsDefaultInstance();
  static neuron_state* default_instance_;
};
// -------------------------------------------------------------------

class pattern_state : public ::google::protobuf::Message {
 public:
  pattern_state();
  virtual ~pattern_state();

  pattern_state(const pattern_state& from);

  inline pattern_state& operator=(const pattern_state& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const pattern_state& default_instance();

  void Swap(pattern_state* other);

  // implements Message ----------------------------------------------

  pattern_state* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const pattern_state& from);
  void MergeFrom(const pattern_state& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated float in = 1;
  inline int in_size() const;
  inline void clear_in();
  static const int kInFieldNumber = 1;
  inline float in(int index) const;
  inline void set_in(int index, float value);
  inline void add_in(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      in() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_in();

  // repeated float out = 2;
  inline int out_size() const;
  inline void clear_out();
  static const int kOutFieldNumber = 2;
  inline float out(int index) const;
  inline void set_out(int index, float value);
  inline void add_out(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      out() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_out();

  // @@protoc_insertion_point(class_scope:pattern_state)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< float > in_;
  ::google::protobuf::RepeatedField< float > out_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_states_2eproto();
  friend void protobuf_AssignDesc_states_2eproto();
  friend void protobuf_ShutdownFile_states_2eproto();

  void InitAsDefaultInstance();
  static pattern_state* default_instance_;
};
// -------------------------------------------------------------------

class patterns_state : public ::google::protobuf::Message {
 public:
  patterns_state();
  virtual ~patterns_state();

  patterns_state(const patterns_state& from);

  inline patterns_state& operator=(const patterns_state& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const patterns_state& default_instance();

  void Swap(patterns_state* other);

  // implements Message ----------------------------------------------

  patterns_state* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const patterns_state& from);
  void MergeFrom(const patterns_state& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pattern_state patterns = 1;
  inline int patterns_size() const;
  inline void clear_patterns();
  static const int kPatternsFieldNumber = 1;
  inline const ::pattern_state& patterns(int index) const;
  inline ::pattern_state* mutable_patterns(int index);
  inline ::pattern_state* add_patterns();
  inline const ::google::protobuf::RepeatedPtrField< ::pattern_state >&
      patterns() const;
  inline ::google::protobuf::RepeatedPtrField< ::pattern_state >*
      mutable_patterns();

  // @@protoc_insertion_point(class_scope:patterns_state)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::pattern_state > patterns_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_states_2eproto();
  friend void protobuf_AssignDesc_states_2eproto();
  friend void protobuf_ShutdownFile_states_2eproto();

  void InitAsDefaultInstance();
  static patterns_state* default_instance_;
};
// ===================================================================


// ===================================================================

// neuron_link_state

// required uint32 id = 1;
inline bool neuron_link_state::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void neuron_link_state::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void neuron_link_state::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void neuron_link_state::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 neuron_link_state::id() const {
  return id_;
}
inline void neuron_link_state::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// required float w = 2;
inline bool neuron_link_state::has_w() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void neuron_link_state::set_has_w() {
  _has_bits_[0] |= 0x00000002u;
}
inline void neuron_link_state::clear_has_w() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void neuron_link_state::clear_w() {
  w_ = 0;
  clear_has_w();
}
inline float neuron_link_state::w() const {
  return w_;
}
inline void neuron_link_state::set_w(float value) {
  set_has_w();
  w_ = value;
}

// -------------------------------------------------------------------

// neuron_state

// required float bias = 1;
inline bool neuron_state::has_bias() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void neuron_state::set_has_bias() {
  _has_bits_[0] |= 0x00000001u;
}
inline void neuron_state::clear_has_bias() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void neuron_state::clear_bias() {
  bias_ = 0;
  clear_has_bias();
}
inline float neuron_state::bias() const {
  return bias_;
}
inline void neuron_state::set_bias(float value) {
  set_has_bias();
  bias_ = value;
}

// required float sum = 2;
inline bool neuron_state::has_sum() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void neuron_state::set_has_sum() {
  _has_bits_[0] |= 0x00000002u;
}
inline void neuron_state::clear_has_sum() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void neuron_state::clear_sum() {
  sum_ = 0;
  clear_has_sum();
}
inline float neuron_state::sum() const {
  return sum_;
}
inline void neuron_state::set_sum(float value) {
  set_has_sum();
  sum_ = value;
}

// required float signal = 3;
inline bool neuron_state::has_signal() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void neuron_state::set_has_signal() {
  _has_bits_[0] |= 0x00000004u;
}
inline void neuron_state::clear_has_signal() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void neuron_state::clear_signal() {
  signal_ = 0;
  clear_has_signal();
}
inline float neuron_state::signal() const {
  return signal_;
}
inline void neuron_state::set_signal(float value) {
  set_has_signal();
  signal_ = value;
}

// repeated .neuron_link_state links = 4;
inline int neuron_state::links_size() const {
  return links_.size();
}
inline void neuron_state::clear_links() {
  links_.Clear();
}
inline const ::neuron_link_state& neuron_state::links(int index) const {
  return links_.Get(index);
}
inline ::neuron_link_state* neuron_state::mutable_links(int index) {
  return links_.Mutable(index);
}
inline ::neuron_link_state* neuron_state::add_links() {
  return links_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::neuron_link_state >&
neuron_state::links() const {
  return links_;
}
inline ::google::protobuf::RepeatedPtrField< ::neuron_link_state >*
neuron_state::mutable_links() {
  return &links_;
}

// -------------------------------------------------------------------

// pattern_state

// repeated float in = 1;
inline int pattern_state::in_size() const {
  return in_.size();
}
inline void pattern_state::clear_in() {
  in_.Clear();
}
inline float pattern_state::in(int index) const {
  return in_.Get(index);
}
inline void pattern_state::set_in(int index, float value) {
  in_.Set(index, value);
}
inline void pattern_state::add_in(float value) {
  in_.Add(value);
}
inline const ::google::protobuf::RepeatedField< float >&
pattern_state::in() const {
  return in_;
}
inline ::google::protobuf::RepeatedField< float >*
pattern_state::mutable_in() {
  return &in_;
}

// repeated float out = 2;
inline int pattern_state::out_size() const {
  return out_.size();
}
inline void pattern_state::clear_out() {
  out_.Clear();
}
inline float pattern_state::out(int index) const {
  return out_.Get(index);
}
inline void pattern_state::set_out(int index, float value) {
  out_.Set(index, value);
}
inline void pattern_state::add_out(float value) {
  out_.Add(value);
}
inline const ::google::protobuf::RepeatedField< float >&
pattern_state::out() const {
  return out_;
}
inline ::google::protobuf::RepeatedField< float >*
pattern_state::mutable_out() {
  return &out_;
}

// -------------------------------------------------------------------

// patterns_state

// repeated .pattern_state patterns = 1;
inline int patterns_state::patterns_size() const {
  return patterns_.size();
}
inline void patterns_state::clear_patterns() {
  patterns_.Clear();
}
inline const ::pattern_state& patterns_state::patterns(int index) const {
  return patterns_.Get(index);
}
inline ::pattern_state* patterns_state::mutable_patterns(int index) {
  return patterns_.Mutable(index);
}
inline ::pattern_state* patterns_state::add_patterns() {
  return patterns_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pattern_state >&
patterns_state::patterns() const {
  return patterns_;
}
inline ::google::protobuf::RepeatedPtrField< ::pattern_state >*
patterns_state::mutable_patterns() {
  return &patterns_;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_states_2eproto__INCLUDED
