#ifndef neuro_net_h
#define neuro_net_h

#include <vector>

#include "neuron.h"

// Класс нейронной сети.
//
// Все нейроны сети хранятся в векторе. Экземпляры класса нейрона хранятся в упорядоченном
// состоянии по идентификатору в порядке возврастания значения идентификатора.
// Вычисление сигнала нейронной сети выполняется также в соответствии с упорядоченнойстью
// вектора нейронов, т.е. сначала будет вычислен сигнал нейрона с самым малым значением
// идентификатора, а самым последний нейрон, сигнал которого будет вычислен, будет иметь
// самый большой идентификатор.
//
// Экземпляр класса нейронной сети не может хранить экземпляры нейронов с
// одинаковыми идентификаторами.
class neuro_net
{
public:
    neuro_net() noexcept;
    neuro_net(const neuro_net& nnet) = delete;

    virtual ~neuro_net() noexcept;

    neuro_net& operator=(const neuro_net& nnet) = delete;

    // Право владения экземпляром класса нейрона передается экземпляру класса нейронной сети.
    // Добавленный экземпляр класса нейрона будет удален при вызове деструктора нейронной сети.
    bool add_neuron(neuron *neu) noexcept;

    // Удаляет нейрон из вектора нейронов нейронной сети. Также будет удален и сам
    // экземпляр классай нейрона.
    bool del_neuron(uint32_t id) noexcept;

    neuron* get_neuron(uint32_t id) noexcept;

protected:
    std::vector<neuron*> m_neurons;
};

#endif // #ifndef neuro_net_h
